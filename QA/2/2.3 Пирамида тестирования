Пирамида тестирования это группировка тестов по уровню детализации и их назначению.
Пирамида тестирования — это концепция в разработке ПО, которая иллюстрирует оптимальное распределение различных типов тестов в проекте.
Пирамида тестирования, в том числе, помогает наглядно объяснить причины, почему количество Unit тестов должно быть больше чем интеграционных. 
Части треугольника закрашенные разными цветами подразумевают количество необходимых тестов данной категории, чем больше площадь, тем больше тестов.
4 уровня пирамиды:
- модульное тестирование(юнит)
- интеграционное тестирование
- системное тестирование
- приемочное тестирование
Встречается  и 3 уровня:
- модульное тестирование( юнит)
- интеграционное тестирование( включает В себя системное)
- приемочное тестирование

разработка ПО - это движение по пирамиде снизу вверх. Важно отметить:
1. Тест(ручной, на высоких уровнях, или автотест, на низких уровнях), должен быть на том же уровне, что и тестируемый объект.
2. Тесты уровнем выше не проверяют логику тестов уровнем/уровнями ниже.
3. Чем выще тесты уровнем, тем они:
- сложней в реализации, соотвественно, дороже в реализации
- важнее для бизнеса и критичнее для пользователейъ
- замедляет скорость прохождения тестовых наборов , например, регресса

Компонентный уровень
Чаще всего называют ЮНИТ тестирование. Реже называют модульным тестированием. На этом уровне тестируют атомарные части кода.
Юнит тестирование - это проверка каждой функции, которая не зависит от других.
Юнит тесты находят ошибки на фундаментальных уровнях, их легче разрабатывать и поддерживать. Важное преимущество модульных тестов в том,
что они быстрые и при изменении кода позволяют быстро провести регресс (убедиться, что новый код не сломал старые части кода).
Тест на компонентном уровне:
1. Всегда автоматизируют
2. Модульных тестов всегда больше, чем тестов с других уровней
3. Юнит тесты выполняются быстрее всех и требуют меньше ресурсов
4. Практически всегда компонентные тесты не зависят от других модулей( на то они и юнит тесты) и UI системы.
На модульном уровне разработчик (или автотестер) использует метод белого ящика. Он знает что принимает и отдает минимальная единица кода, и как она
работает.

Интеграционнный уровень
Проверят взаимосвязь компоненты, которую проверяли на модульном уровне, с другой или другими компонентами, а также интеграцию компоненты с системой 
(проверка работы с ОС, сервисами и службами, базами данных, железом и т.д.). Часто в английских статьях называют service test или API test.
В случае с интеграционными тестами редко когда требуется наличие UI, чтобы его проверить. Компоненты ПО или системы взаимодействуют с тестируемым 
модулем с помощью интерфейсов. Тут начинается участие тестирования. Это проверки API, работы сервисов (проверка логов на сервере, записи в БД) и т.п.
В интеграционном тестировании, выполняются как функциональные (проверка по ТЗ), так и нефункциональные проверки (нагрузка на связку компонент). 
На этом уровне используется либо серый, либо черный ящик.
В интеграционном тестировании есть 3 основных способа тестирования:
- Снизу вверх (Bottom Up Integration)все мелкие части модуля собираются в один модуль и тестируются. Далее собираются следующие мелкие модули в один
большой и тестируется с предыдущим и т.д.
- Сверху вниз (Top Down Integration): сначала проверяем работу крупных модулей, спускаясь ниже добавляем модули уровнем ниже. На этапе проверки 
уровней выше данные, необходимые от уровней ниже, симулируются.
- Большой взрыв ("Big Bang" Integration): собираем все реализованные модули всех уровней, интегрируем в систему и тестируем. Если что-то не работает 
или недоработали, то фиксим или дорабатываем.

Системный уровень
1. Системный уровень проверяет взаимодействие тестируемого ПО с системой по функционалльным и нефункциональным требованиям.
2. Важно тестировать на максимально приближенном окружении, которое будет у конечного пользователя.
Тест-кейсы на этом уровне подготавливаются:
1. По требованиям
2. По возможнным способам использования ПО
На этом уровне используют черный ящик. Интеграционный уровень позволяет верифицировать требования (проверить соответствие ПО прописанным требованиям).

Приемочное тестирование
Также часто называют E2E тестами (End-2-End) или сквозными. На этом уровне происходит валидация требований (проверка работы ПО в целом, не только по 
прописанным требованиям, что проверили на системном уровне).
Проверка требований производится на наборе приемочных тестов. Они разрабатываются на основе требований и возможных способах использования ПО.
Приемочные тесты проводят, когда (1) продукт достиг необходимо уровня качества и (2) заказчик ПО ознакомлен с планом приемки (в нем описан набор 
сценариев и тестов, дата проведения и т.п.).
E2E тесты автоматизируются сложнее, дольше, стоят дороже, сложнее поддерживаются и трудно выполняются при регрессе. Значит таких тестов должно быть меньше.
