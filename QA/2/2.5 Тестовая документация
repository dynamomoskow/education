Тестовая документация — это набор документов, создаваемых перед началом процесса тестирования и непосредственно в процессе.

ПЛАН ТЕСТИРОВАНИЯ (test plan) 
План тестироввания описывает все действия по тестированию в рамках одного проетка. Здесь вы можете найти информацию обо всем, что нужно сделать 
тестировщику или команде QA в ходе проекта.
В каждом плане тестирования указывается объект тестирования, график работы, критерии начала и окончания тестированияЮ стратегия, риски, список
выполненных работ.

ЧЕКЛИСТ (checklist) - это документ, содержащий краткое описание функций, которые должен проверить тестировщик.
Выглядит чеклист как список функций с указанием статума - результата проверки.

ТЕСТ-КЕЙС(test case) — это алгоритм действий, которые требуется совершить для проверки работы программы (кнопок, полей ввода и т.д.). В него входят шаги,
которые предпринимаются перед проверкой (предусловия), являются проверкой, а также ожидаемый результат — то, что получим после выполненных действий.
Тест-кейс — это профессиональная документация тестировщика, последовательность действий направленная на проверку какого-либо функционала, описывающая 
как прийти к фактическому результату.
В тест-кейсе содержатся:
- подробное описание шагов и действий, которые тестировщик должен выполнить для тестирования какой-то одной части функционала,
- критерии  прохождения тестов. 
Атрибуты тест-кейса:
- Уникальный идентификатор тест-кейса (необходим для удобной организации хранения и навигации по нашим тест-наборам.)
- Название (основная тема , или идея тест-кейса. Краткое описание сути)
- Предусловия( описание условий, которые не имеют прямого отношения к проверяемому функционалу, но должны быть выполнены.)
- Шаги( описание последовательности действий, которая должна привест на к ожидаемому результату)
- Ожидаемый результат(что мы ожидаем увидеть после выполнения шагов)
Необязательно:
- история редактирования
Дополнительлные:
-приоритет, функциональный блок, программа, ссылка на требования, номер требования и т.д.

Чего не должно быть в тест-кейсе
1. Зависимостей от других тест-кейсов;
2. Нечеткой формулировки шагов или ожидаемого результата;
3. Отсутствия необходимой для прохождения тест-кейса информации;
4. Излишней детализации.

Сценарий использования (use case)
Use case — это более простой и менее официальный документ. Он описывает сценарий взаимодействия с программным обеспечением. 

БАГ-РЕПОРТ
Баг-репорт это технический документ, который подробно описывает ошибку в работе программы, приложения или другого ПО.
Баг-репорт предоставляет полную информацию о баге (его описание, серьезность, приоритет и т. д.) и документирует шаги и условия для 
воспроизведения этого бага. 
Подробный и эффективный баг-репорт значительно увеличивает шансы быстро исправить баг.
Принцип написания заголовка:
1. Что? — Что сломалось и как именно (что произошло?)
2. Где? — Где именно проблема? В каком месте или компоненте продукта?
3. Когда? — Когда проблема проявляется? Всегда или при конкретных условиях?

Серьезность (Severity) бага
Severity — это атрибут, характеризующий влияние бага на общую функциональность тестируемого продукта.
Пример классификации серьезности багов:
- Blocker. Блокирующая ошибка. Она делает невозможной всю последующую работу с программой. Для возобновления работы нужно исправить Blocker.
- Critical. Критическая ошибка. Нарушает работу основного функционала. Баг проявляется постоянно и делает невозможным использование основных функций программы.
- Major. Существенный баг. Затрудняет работу основного функционала или делает невозможным использование дополнительных функций.
- Minor. Незначительный баг. На функционал системы влияет относительно мало, затрудняет использование  дополнительных функций. Для обхода этого бага могут быть очевидные пути.
- Trivial. Тривиальный баг. Не влияет на функционал проекта, но ухудшает общее впечатление от работы с продуктом.

Приоритет (Priority) бага
Приоритет — атрибут, определяющий скорость устранения бага.

ТРЕБОВАНИЯ (requirements specification)
Спецификация требований или просто требования — это полное описание разрабатываемого программного обеспечения. 
В требованиях указываются свойства, качества и особенности разрабатываемой программы. Используя эту информацию, команды могут избежать недоразумений и разногласий.


