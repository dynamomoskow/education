STLC - это жизненный цикл процесса тестирования
Основные этапы:
1. Анализ требований(REQUIREMENTS ANALYSYS)
Входные параметры:
-требования(подготовленные бизнес аналитеком)
Что происходит в этой фазе:
- ПоДГОТОтовить все вопросы и адресовать их BA/SA/manager
- Определить цели тестирования и приоритеты
- анализ и старт подготовки тестовой среды

2. Тестовое планирование(TEST PLANNING)
Входные параметры:
- откорректированные требования на основе заданных ранее вопросов
Что происходит в этой фазе:
- Написание тест плана
- составление тестовой стратегии
- оценка времени ресурсов нужных для тестирования

3. Написание тестовых случаев(TEST CASE CREATION)
Входные параметры:
- откорректированные требования на основе заданных ранее вопросов
Что происходит в этой фазе:
- Написание тест-кейсов
- Написание автоматических тестов
- Подготовка тестовых данных(Test data)

4. Подготовка тестовой среды (TEST INVIRONMENT SETUP)
Входные параметры:
- Создан тест план
- Готовые тестовые данные
Что происходит в этой фазе:
- Настройка тестовой среды
- НАстройка всех инструментальных средств для тестирования

5. Выполнение тестов (TEST EXECUSION)
Входные параметры:
- Тест кейсы готовы 
- Готовы тестоввые данные
- Тестовая среда готова
- Наличие программного обеспечения
Что происходит в этой фазе:
- Тестирование ПО
- Нахождение и регистрация дефектов 
- Перепроверка дефектов после исправления

6. Завершение цикла тестирования( TEST CYCLE CLOSURE)
Входные параметры:
- Тест-кейсы выполнены
- Дефекты исправлены
Что происзодит в этой фазе:
- Напписание сводного отчета о тестировании
- Формирование метрик
- Подведение итогов о пройденном процессе


7 принципов тестирования:
1️. Исчерпывающее тестирование невозможно. 
(Насколько бы тщательным тестирование не было, нельзя учесть все возможные сценарии и предвидеть все возможные ошибки)
2️. Тестирование демонстрирует наличие дефектов, а не их отсутствие
Тестирование может выявить тот момент, что ошибки присутствуют, но не может доказать в полной мере, что дефектов нет.
3. Заблуждение об отсутствии ошибок
Дефекты однозначно будут. Но в тестировании и нет такой задачи, чтобы выявить 100% багов, т.к. мы уже знаем, что это невозможно, 
исходя из первых трёх принципов. Главное здесь – найти наиболее критичные ошибки.
4. Раннее тестирование сохраняет время и деньги
Чем раньше выявится та или иная проблема – тем меньше средств и трудозатрат потребуется для её устранения.
5. Принцип скопления или кластеризация дефектов
Наибо́льшее количество дефектов обычно содержится в небольшо́м количестве модулей.
Если в каком-то модуле нашлось несколько багов, - это сигнал к тому, чтобы ещё внимательнее протестировать или даже перелопатить его с особой 
тщательностью на наличие скрытых дефектов.
6. Тестирование зависит от контекста
Методология тестирования зависит от контекста системы. Программное обеспечение, разработанное для различных целей (например, интернет-приложения, 
системы безопасности, мобильные приложения), требует разных подходов к тестированию.
Различия контекста:
- по типу продукта – web, desktop, мобильное приложение, сервис и др.;
- по цели продукта – обеспечение безопасности, Game, продажа товаров и др.;
- по проектной команде – специализация, количество человек, опыт и т.д.;
- по доступным инструментам – что присутствует на проекте, для успешной реализации;
- по срокам – как построен рабочий процесс, как часто выходят релизы, время между ними на подготовку;
- по ожидаемому уровню качества – чем выше требования, тем тщательнее нужно тестировать.
7. Парадокс пестицида
Если одни и те же тесты проводить многократно, то они перестают находить новые дефекты. Для выявления новых ошибок тесты должны регулярно обновляться
и пересматриваться, чтобы охватывать разные части программы.


Требования к ПО — это спецификации, описывающие, что должно быть реализовано в продукте. Они определяют, какие функции и возможности должны быть 
доступны пользователям.

Атрибуты требований:
1. Полнота. Требования должны содержать всю необходимую информацию для реализации функционала.
2. Однозначность. Требования должны быть четко сформулированы, без двусмысленности.
3. Непротиворечивость требования не должны противоречить друг другу.
4. Необходимость. Кратко, но емко. Пишите только то, что необходимо.
5. Осуществимость. А можно ли реализовать то, что тут написано? Насколько это будет сложно и дорого?
6. Тестируемость. Можно ли протестировать эту функциональность?


МЕТРИКИ ТЕСТИРОВАНИЯ(Наиболее распространенные):
- Passed/Failed Test Cases. Используется для оценки отношения удачно пройденных тестов к завершившимся с ошибками. Метрика помогает оценить
успешность прохождения тестов.
- Not Run Test Cases. Демонстрирует количество тестов, которые нужно выполнить для данного проекта. Метрика помогает определить причины 
невыполнения тестов и способы их устранения.
- Open/Closed Bugs. Формируется из отношения открытых багов к закрытым. Метрика оценивает скорость устранения багов, а также позволяет выявить
причины, по которым ошибки остались незакрытыми.
- Reopened/Closed Bugs. Рассчитывает соотношение переоткрытых багов к закрытым. Метрика демонстрирует эффективность закрытия бага разработчиками 
и поможет выявить причины, по которым исправление ошибок находится на низком уровне.
- Bugs by Severity/Priority. Общее количество багов по серьёзности/приоритету. Метрика показывает качество предоставляемого кода на тестирование.
- Процент выполненных тест-кейсов
- проуент невыполненных тест-кецйсов
- количество серьезных дефектов

Метрики тестирования используются для количественной оценки процесса тестирования, качества программного обеспечения и его прогресса. Они помогают
понять эффективность тестирования, выявить слабые места, контролировать состояние проекта и принимать обоснованные решения. Без метрик управление
процессом тестирования и оценка его качества становится сложным, поскольку трудно объективно судить о результатах работы.

