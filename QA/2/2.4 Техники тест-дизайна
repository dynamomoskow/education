Тест-дизайн - это этап процесса тестирования, в ходе которого мы создаем тест-кейсы и намечаем структуру действий, связанных с тестированием проекта.
Основная цель тест-дизайна - структурировать процедуры тестирования, чтобы было легче отслеживать покрытие требований тест-кейсами.
Благодаря тест-дизайну мы:
- создаем тесты, помогающие выявлять серьезные ошибки
- вдумчиво подходим к тестированию и не тратим ресурсы впустую
- сводим к минимуму количество тестов, необходимых для тестирования продукта

Техники тест-дизайна - это стратегии, которые помогают лучше писать тест-кейсы. Их использование поомогает создавать меньше тестов, обеспечивая при 
этом широкий охват требований.
Популярные техники тест-дизайна:
- эквивалентное разделение
- анализ граничных значений
- переход состояний
- попарное тестирование
- предугадывание ошибок

Эквивалентное разделение
Подразумевает разбиение тестовых данных на классы по какому-то признаку. Этот метод имеет смысл только в том случае, если компоненты чем-то похожи 
и могут войти в общую группу.
Если мы выбираем в качестве техники тест-дизайна эквивалентное разделение, это означает, что мы будем тестировать только несколько значений из 
каждого класса элементов.
Эквивалентное разделение — хорошее решение для случаев, когда вы имеете дело с большим объемом входящих данных или множеством одинаковых вариантов ввода.

Анализ граничных значений
Техника граничных значений (Boundary Value Analysis, BVA) — это метод тестирования, основанный на проверке значений, находящихся на границах диапазонов 
допустимых значений. Суть метода заключается в том, что ошибки часто проявляются именно на границах диапазонов, а не внутри них
Эта техника тестирования фокусируется на проверке значений на границах допустимых диапазонов, так как ошибки часто возникают именно в этих точках. 
Тестируются значения, непосредственно находящиеся на границах, и значения чуть выше и чуть ниже этих границ.
Граничные значения — это те места, в которых один класс эквивалентности переходит в другой.
ОПРЕДЕЛИТЬ ШАГ
Запомнить, что для применения техники граничных значений для начала нужно определить шаг на диапазоне наших значений.
Когда приводишь пример применения техники граничных значений - всегда озвучивай или уточняй у собеседующего, какой шаг не диапазоне.

Переход состояний
Суть: Используется для тестирования приложений, которые изменяют своё состояние в зависимости от предыдущих действий пользователя или внутренних 
процессов. Моделируется система в виде состояний и переходов между ними, чтобы проверить корректность работы на каждом этапе.
Когда использовать: Когда приложение имеет явные состояния (например, автомат с напитками, различные шаги регистрации, процесс оформления заказа).
Пример: Банковский аккаунт, где состояние может быть "активный", "заблокированный", "ожидание подтверждения". Проверяются переходы между этими состояниями.
Диаграмма перехода состояний визуализирует состояния программы в разные периоды времени и на разных этапах использования. Визуальную информацию 
воспринимать проще, чем текст. Таким образом, техника перехода состояний позволяет быстрее получить максимальное тестовое покрытие. 
Этот метод эффективен при создании наборов тестов для систем со множеством вариаций состояний. Он вам пригодится для тестирования последовательности
событий с конечным числом входных параметров.

Попарное тестирование
Методика попарного тестирования используется для уменьшения числа тестов путем анализа комбинаций параметров. Проверяются все возможные пары 
значений, чтобы охватить наиболее вероятные комбинации.
Когда использовать: В случае наличия множества параметров, каждая комбинация которых может влиять на поведение системы. Эта техника позволяет
избежать перебора всех возможных комбинаций, тестируя только наиболее значимые пары.
Пример: Допустим, у нас есть три параметра для тестирования (A, B, C), каждый из которых имеет по три возможных значения. Вместо тестирования
всех 27 (3x3x3) комбинаций проверяются пары параметров (A, B), (B, C), (A, C), что существенно снижает количество тестов.
Попарное тестирование основано на математических алгоритмах, а именно на комбинаторике. Оно позволяет создавать уникальные пары и тестировать
огромное количество поступающих данных в разных сочетаниях, но расчеты могут быть сложными. 
Чтобы охватить тестовыми сценариями максимум фич и при этом потратить минимальное время на тестирование, нужно правильно сопоставлять данные,
комбинируя пары определенным образом на основе расчетов.

Предугадывание ошибок
Предугадывание ошибок обычно применяется вместе с другими техниками тест-дизайна. Суть этой техники в том, что тестировщик предугадывает, где 
могут появиться ошибки, опираясь на свой опыт, знание системы и требования к продукту. Таким образом он выявляет места, где могут накапливаться 
ошибки, и может уделить этим областям повышенное внимание.

State & Transition Diagram (сокращенно S&T) — схема состояний и переходов. Техника для визуализации ТЗ. Она наглядно показывает, как некий объект 
переходит из одного состояния в другое.

ПРИМЕР ЭКВИВАЛЕНТНОГО
Допустим, есть система, которая принимает возраст пользователя в диапазоне от 18 до 65 лет. Требуется протестировать поле ввода возраста.
1. Анализ требований: возраст от 18 до 65
2. Определение классов эквивалентности:
Валидные классы: от 18 до 65 лет
Невалидные классы: 
- меньше 18 лет
- больше 65 лет
- отрицательные значения
- невалидные типы данных(например текст)
3. Выбор представителя каждого класса:
- Валидные: 18, 33, 56
- Невалидные: 17, 70, -22, "девятнадцать" 
4. Создание тестов:
- Проверяем возраст 18, 33, 56 - система должна принимать.
- Проверяем возраст 17, 70, -22, "девятнадцать" - система должна выдавать ошибку.


Пример предугадывания ошибок
Как правило, тестировщики начинают с тестирования на распространенные ошибки:
- ввод пробелов в текстовые поля
- нажатие кнопки Submit без ввода данных
- ввод неверных параметров (адрес электронной почты вместо номера телефона и т.д.)
- загрузка файлов, превышающих максимально допустимый размер
