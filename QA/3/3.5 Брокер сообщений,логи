
Брокер сообщений — это посредник, который управляет обменом сообщений между различными приложениями или системами. Его задача — обеспечить надёжную
и эффективную передачу данных, особенно в асинхронных системах, где отправитель и получатель не обязательно работают одновременно.

Здесь возможны несколько вариантов:
- Сообщение отправляется напрямую от отправителя к получателю.(каждое сообщение используется только однократно;)
- Схема публикации/подписки.(отправитель не знает своих получателей и просто публикует сообщения в определённую тему.)

Основные функции брокера сообщений:
1. Прием и хранение сообщений 
2. Маршрутизация сообщений
3. Управление очередями 
4. Гарантия доставки
5. Поддержка различных протоколов и форматов.

Примеры применения
- В микросервисной архитектуре для связи между сервисами.
- Для обработки данных в режиме реального времени, например, в стриминговых платформах.
- В IoT-системах, где устройства отправляют данные через брокера в центральное хранилище или сервер обработки.
Примеры брокеров:
- Apache Kafka — мощный брокер для обработки больших потоков данных.
- RabbitMQ — брокер с гибкой маршрутизацией сообщений и очередями.
- ActiveMQ — популярный брокер с поддержкой различных протоколов.
- Redis и Amazon SQS — могут использоваться для простых очередей сообщений.

KAFKA
Основы кластера Kafka — это продюсер, брокер и консумер. Продюсер пишет сообщения в лог брокера, а консумер его читает.
Лог — это упорядоченный поток событий во времени. Событие происходит, попадает в конец лога и остаётся там неизменным.
Продюсер
Продюсер (или производитель, producer) — это компонент, который отвечает за создание и отправку сообщений в Kafka-кластер. Продюсер записывает 
сообщение в Kafka, тот сохраняет события, возвращает подтверждение о записи или acknowledgement. Продюсер получает его и начинает следующую запись.
Брокеры
Kafka состоит из серверов, которые называют брокерами. Они получают сообщения от продюсеров, хранят их и передают получателям.
Консумеры
Получатели данных, называемые "консюмерами", подписываются на темы и читают нужные им сообщения. Например, аналитическая программа может получать 
данные из темы "активность пользователей", чтобы отслеживать статистику.
Архитектура Kafka
Кластер Kafka позволяет изолировать консумеры и продюсеры друг от друга. Продюсер ничего не знает о консумерах при записи данных в брокер, а консумер 
ничего не знает о продюсере данных.
Zookeeper — это выделенный кластер серверов для образования кворума-согласия и поддержки внутренних процессов Kafka. Благодаря этому инструменту мы 
можем управлять кластером Kafka: добавлять пользователей и топики, задавать им настройки.
Основные задачи Zookeeper:
- Управление конфигурацией(хранит и обновляет конффигурацию распределенных прилодений)
- Обнаружение сервисов (позводляет различным частям сервисов находить друг друга)
- Управление лидерством(следит и определяет главный сервер)
- Синхронизация данных и координация(обечпечивает синхронизацию между разными копмонентами, предотвращая конфликты)
Топик — это логическое разделение категорий сообщений на группы. (события по статусам заказов, координат партнёров, маршрутных листов и так далее.)
Ограничений на количество топиков в кластере Kafka нет, но есть ограничения самого компьютера.
Топики в Kafka разделены на партиции.
Партиции позволяют обрабатывать сообщения параллельно, что увеличивает скорость и масштабируемость Kafka. Сообщения внутри партиции упорядочены по 
времени.
ТОпик -->Партиции-->Сегменты
Сегменты - Это отдельные файлы, которые можно создать, ротировать или удалить в соответствии с настройкой устаревания данных в них. 
log-start offset - Начальная позиция первого сообщения в логе
log-end offset - Позиция сообщения, записанного последним
current offset - Позиция консумера сейчас
Лаг- это Расстояние между конечным оффсетом и текущим оффсетом консумера
Репликация Данных
У каждой партиции есть настраиваемое число реплик.
Одна из реплик называется лидером, остальеные фолловерами.Продюсер подключается к брокеру, на котором расположена лидер-партиция, чтобы записать в неё 
данные. Записанные в лидера данные автоматически реплицируются фолловерами внутри кластера Kafka. Они подключаются к лидеру, читают данные и асинхронно
сохраняют к себе на диск. В настроенном кластере Kafka репликация обычно занимает доли секунд.
Консумеры со своей стороны также читают из лидерской партиции — это позволяет достичь консистентности при работе с данными. Задача фолловеров здесь как
и в предыдущем случае сводится к копированию данных от лидера.
Роли лидеров и фолловеров не статичны. Kafka автоматически выбирает роли для партиций в кластере.
