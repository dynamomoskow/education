Реляционная база данных — это тип базы данных, в которой данные организованы в таблицы, и эти таблицы связаны на основе данных, общих для каждой 
из них. Эта структура позволяет выполнять гибкие сложные запросы одновременно ко многим таблицам.
Структура реляционной базы данных
Реляционная база данных состоит из нескольких ключевых компонентов:
- таблицы. Это строительные блоки реляционной базы данных. Каждая таблица содержит данные об определенном объекте, таком как клиенты или продукты;
- поля(столбец). Это различные категории данных в каждой таблице, такие как «имя» или «электронная почта»;
- записи(строка). Это отдельные записи в таблице. Каждая запись включает уникальный ключ, известный как первичный ключ, который идентифицирует эту запись;
- отношения. Это связи между таблицами, установленные с помощью общих данных, известных как внешние ключи.
Pеляционные базы данных организуют данные в таблицы, нереляционные базы данных(NoSQL) не полагаются на табличную структуру и используют различные модели 
данных,включая документ, график, ключ-значение и широкий столбец.
Реляционные базы данных лучше всего подходят для обработки структурированных данных и сложных запросов. Нереляционные базы данных лучше подходят для 
обработки больших объемов разнообразных, быстро меняющихся данных.

SQL (Structured Query Language, или язык структурированных запросов) — это декларативный язык программирования (язык запросов), который 
используют для создания, обработки и хранения данных в реляционных БД.

Первичный ключ (Primary Key) — это уникальный идентификатор для каждой записи в таблице базы данных. Указывает на запись, к которой он относится.
В одном отношении не может быть нескольких записей с одним и тем же первичным ключом, и значение первичного ключа не может быть NULL. 
Первичным ключом может быть любое уникальное значение.
Внешний ключ (Foreign Key) — содержит ссылку на первичный ключ из другой таблицы и привязывает одну таблицу к другой.
это способ связи таблиц, который поддерживает целостность данных и предотвращает ошибки, связанные с отсутствием соответствия между связанными
таблицами. Он позволяет создать реляционные связи и управлять изменениями и удалениями связанных данных.
Родительский — это первичный ключ, на который ссылается внешний ключ.

Система управления базами данных (СУБД) — это набор инструментов, которые позволяют удобно управлять базами данных: удалять, добавлять, 
фильтровать и находить элементы, менять их структуру и создавать резервные копии.

SQL-команды 4 вида:
- DDL (Data Definition Language, или язык описания данных). Их используют, чтобы создавать, изменять и удалять целые таблицы.
- DML (Data Manipulation Language, или язык управления данными). Их применяют к содержимому таблиц, чтобы создавать, изменять, удалять атрибуты 
и записи. Если нужно получить какую-то информацию из базы данных, то пользуются именно DML-операторами.
- DCL (Data Control Language, или язык контроля данных). Они нужны, чтобы выдавать конкретным пользователям доступ к базам данных и отзывать его.
- TCL (Transaction Control Language, или язык контроля транзакций). Позволяет управлять транзакциями. Транзакция — это набор из нескольких команд, 
которые выполняются поочерёдно.

Команды 
Вот список самых распространённых операторов SQL.
CREATE DATABASE — создаёт БД.
DROP DATABASE — удаляет БД.
USE — указывает СУБД, в какой БД работать в дальнейшем.
CREATE TABLE — создаёт новую таблицу внутри БД.
DROP TABLE — удаляет таблицу.
INSERT — добавляет данные в таблицу. Используется вместе с операторами INTO (указывает на таблицу) и VALUES (ему передают значения, которые нужно 
добавить).
UPDATE — обновляет данные в таблице. UPDATE указывает на саму таблицу, а потом используется оператор SET, после которого и прописываются новые 
значения для атрибутов. Чтобы указать на конкретную запись, используют оператор WHERE.
DELETE — удаляет данные из таблицы. Используется перед оператором FROM.
SELECT — выбирает данные. Ему передают название атрибута или атрибутов. Если нужно выбрать все атрибуты, то пишут SELECT *. Находится перед 
оператором FROM.
FROM — указывает на таблицу, к которой обращена команда.
WHERE — указывает на условие или условия, которым должна удовлетворять строка. Пишется после оператора FROM. Необязательный элемент инструкции. 
Если его не указывать, то команда применяется ко всем записям в таблице.
ORDER BY — сортирует результаты запроса. По умолчанию — в порядке возрастания. Для сортировки по убыванию можно использовать слово DESC.
JOIN — используются для комбинации записей двух и более таблиц. Бывает нескольких видов: внутренний (INNER), внешний (OUTER), левый (LEFT) и правый (RIGHT).
АГРЕГАТНЫЕ ФУНКЦИИ
COUNT — считает количество записей в колонке.
SUM — складывает содержимое значений колонки.
MIN — указывает на минимальное значение в колонке.
MAX — указывает на максимальное значение в колонке.
AVG — считает среднее значение в колонке.
ROUND — округляет значение в колонке.
GROUP BY — группирует выходные значения для колонок, к которым применили агрегатную функцию.
HAVING — работает как WHERE, но может применяться к агрегатным функциям.
LIMIT - используется для ограничения количества возвращаемых строк.


mysql -u root -p
SHOW DATABASES;
CREATE DATABASE name;
DROP DATABASE name;
USE name;
show tables;
CREATE TABLE teacher(
       -> id INT AUTO_INCREMENT PRIMARY KEY,
       -> surname VARCHAR(255) NOT NULL
       -> );
show columns FROM teacher;
CREATE TABLE lesson(
    -> id INT AUTO_INCREMENT PRIMARY KEY,
    -> name VARCHAR(255) NOT NULL,
    -> teacher_id INT NOT NULL,
    -> FOREIGN KEY (teacher_id) references teacher(id)
    -> );
INSERT INTO teacher (surname) values ("Иванов");
SELECT * FROM teacher; - получить все данные из таблицы
SELECT DISTINCT surname FROM teacher; - толлько уникальтные значения из surname
SELECT * FROM teacher WHERE id = 1; - id >< 3 и т.д
SELECT * FROM teacher WHERE surname = "Петров";
SELECT * FROM teacher LIMIT 5;
SELECT id AS 'Идентификатор', surname AS 'Фамилия' FROM teacher; - временное перименование полей(ALTER TABLE постоянное)
SELECT * FROM teacher ORDER BY surname; - сортировка по фамилии
SELECT * FROM teacher ORDER BY id DESC; - сортировка по id в обратном порядке
ALTER TABLE teacher ADD age INT; - добавили колонку age в таблицу
UPDATE teacher SET age = 20 where id=1; - установили возраст 20 для айди 1
SELECT * FROM teacher WHERE surname LIKE "%ов"; - поиск по таблице любых слов с окончанием ов
SELECT * FROM teacher WHERE surname LIKE "п%ов"; найдет только начинается на п и окончаввается на ов
SELECT * FROM teacher WHERE id > 3 AND age < 46; логическая фильтрация OR или
SELECT * FROM teacher WHERE NOT id = 2; - исключить айди 2
SELECT * FROM teacher WHERE NOT id BETWEEN 2 and 5;
DELETE FROM teacher WHERE id = 8;
SELECT teacher.surname, lesson.name FROM teacher INNER JOIN lesson ON teacher.id = lesson.teacher_id;
INNER JOIN только совпадения из обеих таблиц.
LEFT OUTER JOIN все записи из левой таблицы, совпадения из правой, NULL для отсутствующих.
RIGHT OUTER JOIN все записи из правой таблицы, совпадения из левой, NULL для отсутствующих.
SELECT * FROM teacher UNION SELECT * FROM lesson; вертикальное обьединение UNION
SELECT AVG(age) FROM teacher; - возвращает средний возраст
SELECT MAX(age), MIN(age) FROM teacher;
SELECT SUM(age) FROM teacher;
INSERT INTO teacher (surname, age) VALUES ("Пупкин", 25), ("шишкин", 30); - добавление в табилцу
SELECT age, COUNT(age) FROM teacher GROUP BY age;



