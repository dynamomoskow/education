API (Application Programming Interface) – это набор правил и протоколов, который позволяет разным программам взаимодействовать друг с другом.
API (Application programming interface) — это контракт, который предоставляет программа.
Стили разработки:
- Code first — сначала пишем код, потом по нему генерируем контракт
- Contract first — сначала создаем контракт, потом по нему пишем или генерируем код (в этой статье я буду говорить именно об этом стиле)
API включает в себя:
- саму операцию, которую мы можем выполнить
- данные, которые епоступают на вход
- данные, которые оказываются на выходе(контент данных или сообщение об ошибке)

Как вызывается API
Напрямую:
1. Система вызывает функции внутри себя(Разные части программы как-то общаются между собой. Они делают это на программном уровне, то есть на уровне API!)
2. Система вызывает метод другой системы(гает через api какой-то метод другой системы. Она может попытаться получить данные из другой системы. Или 
наоборот, отправить данные в эту систему.
3. Человек вызывает метод
4. Автотесты дергают методы
Косвенно:
1. Пользователь работает с GUI

Интеграция — когда одна система общается с другой по какому-то протоколу передачи данных. Это называется Remote API, то есть общение по сети, по 
некоему протоколу (HTTP, JMS и т.д.). В противовес ему есть еще Local API (он же «Shared memory API») — это то API, по которому программа общается 
сама с собой или общается с другой программой внутри одной виртуальной памяти.
Remote APi - общение по сети(удаленное)
Shared memory API - общение в одной виртуальной памяти

Инструменты для тестирования API:
- Postman — это инструмент для тестирования API, позволяющий создавать, отправлять и тестировать HTTP-запросы и проверять ответы на них.
- Swagger — это инструмент для документирования и тестирования API, позволяющий автоматически создавать документацию API из описания структуры API
в формате YAML или JSON файла.
- SoapUI — это инструмент для тестирования веб-сервисов, позволяющий создавать и выполнять тесты на протоколе SOAP.
- Fiddler — это инструмент для анализа и отладки HTTP-трафика между веб-браузером и веб-сервером. С точки зрения тестирования API Fiddler позволяет
перехватывать, анализировать и модифицировать HTTP-запросы и ответы, передаваемые между клиентом и сервером.
- JMeter — это инструмент для тестирования производительности и функциональности программного обеспечения, который может использоваться для тестирования API. 

Преимущества и особенности Swagger:
- Легкость использования
- Автоматическое поколение документации
- Поддержка различных языков программирования
- Поддержка открытых стандартов
- Тестирование и валидация API
- Расширяемость Swagger имеет открытый код 

Postman
Collection
Коллекция — отправная точка для нового API. Можно рассматривать коллекцию, как файл проекта. Коллекция объединяет в себе все связанные запросы. Обычно 
API описывается в одной коллекции, но если вы желаете, то нет никаких ограничений сделать по-другому. Коллекция может иметь свои скрипты и переменные
Folder
Папка — используется для объединения запросов в одну группу внутри коллекции.
Переменные
Postman имеет несколько пространств и областей видимости для переменных:
- Глобальные переменные
- Переменные коллекции
- Переменные окружения
- Локальные переменные
- Переменные уровня данных

Аутентификация - это процесс проверки подлинности клиента, запрашивающего доступ к веб-ресурсам или веб-сервисам. Она необходима для обеспечения 
безопасной и контролируемой передачи данных между клиентами и серверами (HTTP код 401 в случае не успеха).
Авторизация - это процесс предоставления доступа к определенным ресурсам или функциям системы после успешной аутентификации клиента. Авторизация 
определяет права доступа и уровни разрешений пользователя или клиента на конкретные операции или ресурсы в системе (HTTP код 403 в случае не успеха).
Идентификация — это процесс определения или установления идентичности клиента или пользователя, обычно на основе предоставленных учетных данных или 
других идентификационных параметров.

API Key Authentication— предполагает использование специального ключа доступа (API key), который обычно передается в заголовке запроса. Этот ключ 
является уникальным для каждого клиента и используется для идентификации, аутентификации и авторизации клиента при обращении к API.
Bearer token Authentication - метод, при котором после успешной аутентификации клиент получает специальный токен, который затем включается в 
заголовок «Authorization» для каждого запроса к API. Токен может быть получен через процесс авторизации, такой как OAuth 2.0
Basic Authentication - это метод, при котором передаются имя пользователя и пароль, закодированные в формате Base64. Этот метод прост в реализации
и широко поддерживается. Передается в заголовке запроса.

