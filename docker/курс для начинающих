Docker - сервис для запуска приложений в контейнерах

Почему стоит использовать:
- Приложения запускаются в изолированной среде
- Легко запускать приложения на разных серверах
- Все зависимости приложения устанавливаются внутри контейнера
- Легко масштабировать путем увеличения количества контейнеров
- Очень удобно использовать в процессе разработки приложений

Контейнер - это самый маленький элемент в мире Docker

Компоненты Docker:
- Client
- Daemon
- Host
- Container
- Image
- Repository
- Registry

Строение образов (Image):
- Базовый слой
-слой1 
-слой2 и т.д

Слой - это набор файлов-
- Все слои read-only
- Образы можо перемещать и удалть
- Образы хранятся в репозиториях
- Есть официальные образы и образы сообщества

Репозиторий Docker:
- В репозитории хранятся разные версии образа
- Разные версии помечаются разными тегами
- Одна версия образа может иметь несколько тегов

docker ps
docker ps -a - показывает список запущенных и остановленных контейнеров
docker images -показывает список ллокальных образов
docker run hello-world (:latest)
docker rm 202ed8eaf0e7 - удаляет контейнер с айди 202ed8eaf0e7,можно использовать имя
docker container prune - удалить все контейнеры остановленные

docker run -it busybox
hostname -i

NGINX
docker run -d nginx -запуск контейнера в фоновом режиме
docker container inspect 39fafcc6326b
docker stop name or id
docker kill
docker exec -it 2ecf95cf5818 bash - запускает команду bash внутри запущенного контейнера
/usr/share/nginx/html
docker run -d --name my_nginx nginx - создается контейнер nginx  c именем my_nginx запущенный в фоновом режиме
docker run -d -p 8080:80 --name nginx8080 nginx 

code . - vscode открыть папку в рабочую область

max@max-ThinkBook-15-G2-ITL:~/docker/nginx$ echo ${PWD}
/home/max/docker/nginx
max@max-ThinkBook-15-G2-ITL:~/docker/nginx$ docker run -v ${PWD}:/usr/share/nginx/html -p 8080:80 -d nginx

docker run -it --rm busybox - запуск контейнера и автоматическое удаление при остановке
\ - слеш разбивает команду на строки

ЭТАПЫ СОЗДАНИЯ ОБРАЗОВ:
- Для создания образа необходим Dockerfile
- Обычно Dockerfile помещают в корне папки приложения
- Dockerfile содержит инструкции по созданию образа
- При создании образа можно указать имя и тег для образа
- На основании готового образа можно создавать контейнеры

Пример:

FROM python:alpine
WORKDIR /app
COPY . .
CMD [ "python", "main.py" ]
-----------

---------------
docker build .
docker build . -t name_image:teg(пример 4.1.3)

DOCKER COMPOSE
Преимущества DOCKER COMPOSE:
- Декларативный подход к созданию контейнеров
- Все необхожжимые контейнеры запускаются одной комадой
- Автоматическое создание необходимых образов на основании Dockerfile каждого приложения
- Автоматическое создание изолированной сети для взаиможействия контейеров
- Благодаря DNS возможно взаимодействие между контейнерам, используя имена сервисов

Пример:
version: "3"

services:
  app:
    build: ./app
  mongo:
    image: mongo
-----------------

docker-compose up -d
docker-compose down
docker-compose up -d --build - пересобирание образа
docker logs 7bae07363492

Docker Network

docker run nginx (bridge doker0: 172.17.0.0/16)
docker run nginx --network=host (host ServerIp (10.15.11.12)
docker run nginx --network= none
macvlan
ipvlan
overlay

Bridge
docker network create --drive bridge NAME -создаем сеть бридж с именем нейм
docker run --net myNAME nginx

Host
--drive host

None
--drive none

docker network ls
docker network create myNet01 
docker network create --driver host myNethost
docker network create -d null myNetnone
docker network inspect myNet01 
docker network create -d bridge --subnet 192.168.10.0/24 --gateway 192.168.10.1 myNet192
docker network rm myNet01 myNet192


